@inject ILocalStorageService localStorage
@using System.Text.RegularExpressions;
@inject ISnackbar SnackbarService
@inject NavigationManager NavigationManager

<MudText Class="@longPassword"><MudIcon Icon="@Icons.Material.Filled.Check" />Obsahuje alespoň 8 znaků</MudText>
<MudText Class="@difChars"><MudIcon Icon="@Icons.Material.Filled.Check" />Obsahuje jak malá (a-z), tak velká písmena(A-Z)</MudText>
<MudText Class="@containNum"><MudIcon Icon="@Icons.Material.Filled.Check" />Obsahuje alespoň jednu číslici(0-9)</MudText>
<MudText Class="@containSpecialChar"><MudIcon Icon="@Icons.Material.Filled.Check" />Obsahuje alespoň jeden speciální znak (@@,#,/)</MudText>
<MudText Class="@notContainName"><MudIcon Icon="@Icons.Material.Filled.Check" />Neobsahuje Vaše jméno</MudText>
<MudText Class="@notContainEmail"><MudIcon Icon="@Icons.Material.Filled.Check" />Neobsahuje Vaší e-mailovou adresu</MudText>

<MudButton OnClick="TryRegister" Variant="Variant.Filled" DisableElevation Class="space-navigate-btn mt-10">Vytvořit účet</MudButton>

@code {
    [Parameter]
    public string Password { get; set; }

    [Parameter]
    public EventCallback<bool> PasswordValidated { get; set; }
    #region class variable
    string longPassword = "not-validated";
    string difChars = "not-validated";
    string containNum = "not-validated";
    string containSpecialChar = "not-validated";
    string notContainName = "validated";
    string notContainEmail = "validated";
    #endregion
    bool isValidated = false;
    string email = "";
    string fullName = "";

    protected override async Task OnInitializedAsync()
    {
        email = await localStorage.GetItemAsStringAsync("email");
        fullName = await localStorage.GetItemAsStringAsync("fullName");
    }

    protected override async Task OnParametersSetAsync()
    {
        if (string.IsNullOrEmpty(Password))
            return;

        isValidated = true;

        if (Password.Length >= 8)
            longPassword = "validated";

        else
        {
            longPassword = "not-validated";
            isValidated = false;
        }

        if (new Regex(@"[0-9]+").IsMatch(Password))
            containNum = "validated";

        else
        {
            containNum = "not-validated";
            isValidated = false;
        }


        if (new Regex(@"[A-Z]+").IsMatch(Password) && new Regex(@"[a-z]+").IsMatch(Password))
            difChars = "validated";

        else
        {
            difChars = "not-validated";
            isValidated = false;
        }


        if (new Regex(@"[!@#$%^&*()_+=\[{\]};:<>|./?,-]").IsMatch(Password))
            containSpecialChar = "validated";

        else
        {
            containSpecialChar = "not-validated";
            isValidated = false;
        }


        if (!Password.Contains(email))
            notContainEmail = "validated";

        else
        {
            notContainEmail = "not-validated";
            isValidated = false;
        }

        // split by " " for first name and last name
        var name = fullName.Split(' ');

        if (!Password.Contains(name[0]) && !Password.Contains(name[1]))
            notContainName = "validated";

        else
        {
            notContainName = "not-validated";
            isValidated = false;
        }

    }   

    void TryRegister()
    {
        if (!isValidated)
            return;

        try
        {
            //call api

            NavigationManager.NavigateTo("/registration/complete");
        }
        catch
        {
            SnackbarService.Add("Něco se nepovedlo", Severity.Error);
        }

    }
}
